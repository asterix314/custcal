/****************************************
    存储过程：    `存储过程`
    业务描述：    `业务名称`（`业务摘要`）
*****************************************/

if exists (select * from sysobjects where type='P' and name='`存储过程`')
    drop proc `存储过程`
go
/*
select * from `业务流水` where bizdate<20150106
select * from `业务流水` where sno=251110 and bizdate=20150130
select * from `业务流水` where sno=278249 and bizdate=20150105
select * from `业务流水` where custid=129500065129 and bizdate=20150105 and digestid=`业务摘要`
declare @msg as varchar(128)
exec `存储过程` @serverid=1, @bizdate=20150105, @sno=148741, @custid=129500065129, @msg=@msg output
select @msg

select * from `业务流水` where custid=129500065129 and bizdate=20150105 and digestid=221001
select * from `持仓核算` where custid=129500065129 and stkcode='601607'
*/
CREATE proc `存储过程`(
 @serverid  char(1)      
,@bizdate   int          
,@sno       int
,@custid    bigint    
,@msg       varchar(128) =null output
)
with encryption
as
declare @orgid as varchar(4), @fundid as bigint, @digestid as int, @market as char(1), @stkcode as varchar(10),
        @stkeffect as numeric(20,2), @matchqty as numeric(20,2), @matchamt as numeric(20,2), @bankcode as varchar(4), 
        @moneytype as char(1), @fundeffect as numeric(20,2), @fee_sxf as numeric(20,2), @stkqty as numeric(20,2),
        @stkqty_ch as numeric(20,2), @fee_jsxf as numeric(20,2), @fee_ghf as numeric(20,2), @fee_yhs as numeric(20,2),
        @qtfee as numeric(20,2), @ordersno as bigint, @orderdate as int, @sett_status as char(1)
declare @tx_stkcost as numeric(20,2), @syvalue_ch as numeric(20,2), @stkcost_ch as numeric(20,2), 
        @rowcount as int, @ret as int
        
 select @orgid=orgid, @fundid=fundid, @digestid=digestid, @market=market, @stkcode=stkcode, 
        @stkeffect=stkeffect, @matchqty=matchqty, @fundeffect=fundeffect, @matchamt=matchamt, 
        @fee_sxf=fee_sxf, @fee_jsxf=fee_jsxf, @fee_ghf=fee_ghf, @fee_yhs=fee_yhs,
        @qtfee=fee_qsf+fee_jygf+fee_jsf+fee_zgf+fee_qtf+feefront, 
        @bankcode=bankcode, @moneytype=moneytype, @ordersno=ordersno, @orderdate=orderdate,
        @sett_status=sett_status
   from `业务流水`
  where sno=@sno and bizdate=@bizdate and serverid=@serverid and custid=@custid and digestid = `业务摘要` -- `业务名称`

begin try
    if (@sett_status is null)
       begin
          select @msg='该笔流水不存在或调用错误.'
          raiserror(' %s', 12, 1, @msg) with SETERROR
       end

    if (@sett_status ='3')
       begin
          select @msg='该笔流水已处理.'
          return 0
       end

    if (@fundeffect<=0)
       begin
          select @msg='资金发生与该业务不符.'
          raiserror(' %s', 12, 1, @msg) with SETERROR
       end

begin tran

  select @stkqty = stkqty, @syvalue_ch = @matchamt - stkcost * @matchqty / stkqty,
         @stkcost_ch = -stkcost * @matchqty / stkqty, @stkqty_ch = -@matchqty
     from `持仓核算`
    where serverid = @serverid and orgid = @orgid and custid = @custid and fundid = @fundid
      and market = @market and stkcode = @stkcode and ltlx = '`流通类型`' -- primary key

    if (@stkqty is null)
       begin
          select @msg='卖出：客户无持仓.'
          raiserror(' %s', 12, 1, @msg) with SETERROR
       end
    else if (@matchqty > @stkqty)
       begin
          select @msg='卖出：客户持仓不足.'
          raiserror(' %s', 12, 1, @msg) with SETERROR
       end


    -- 价差放入利息收入
    update `持仓核算` 
       set lxsr = lxsr + @syvalue_ch, lxsr_ch = lxsr_ch + @syvalue_ch,
           stkcost = stkcost + @stkcost_ch, stkcost_ch = stkcost_ch + @stkcost_ch,
           stksaleqty=stksaleqty+@matchqty, stksaleamt=stksaleamt+@matchamt,
           stkqty=stkqty-@matchqty, stkqty_ch=stkqty_ch-@matchqty, 
           mktvalue=mktvalue+@stkcost_ch
     where serverid=@serverid and orgid=@orgid and custid=@custid and fundid=@fundid and
           market=@market and stkcode=@stkcode and ltlx='`流通类型`' -- 主键

    select @rowcount=@@rowcount
    if (@rowcount>1)    
       begin
          select @msg='更新证券持仓行数错误(rowcount='+CONVERT(varchar, @rowcount)+').'       
          raiserror(' %s', 12, 2, @msg) with SETERROR                   
       end
      

    update `资金核算`
       set fundbal=fundbal+@fundeffect, fundbal_ch=fundbal_ch+@fundeffect
     where serverid=@serverid and orgid=@orgid and custid=@custid and bankcode=@bankcode and
           fundid=@fundid and moneytype=@moneytype -- primary key
           
    select @rowcount=@@rowcount
    if (@rowcount>1)    
       begin
          select @msg='更新资金行数错误(rowcount='+CONVERT(varchar, @rowcount)+').'       
          raiserror(' %s', 12, 2, @msg) with SETERROR                   
       end
       else if (@rowcount=0)
       begin
          insert `资金核算`
                 (serverid, orgid, custid, fundid, moneytype, bankcode,
                 fundbal, fundbal_ch, fundsave, fundsave_ch, fundunsave, fundunsave_ch, fundloan, fundloan_ch,
                 funddebt, funddebt_ch, funduncome, funduncome_ch, fundunpay, fundunpay_ch, fundintr, fundintr_ch,
                 fundaward, fundaward_ch, fundadjust, fundadjust_ch, fundlastbal, totalvalue, tjdate, remark,
                 nav, mktvalue, totalfe, rzlx, rzlx_ch)
          values (@serverid, @orgid, @custid, @fundid, @moneytype, @bankcode,
                 @fundeffect, @fundeffect,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,'',
                 0,0,0,0,0);
       end
             
      select @msg='核算处理成功'
      update `业务流水`
         set sett_status=3, sett_remark=@msg
       where sno=@sno and bizdate=@bizdate and serverid=@serverid and custid=@custid

      commit tran
      return 0
end try
begin catch
   if @@trancount>0
       rollback tran

   select @msg='失败:'+error_message()+''
   update `业务流水`
      set sett_status=4, sett_remark=@msg
    where sno=@sno and bizdate=@bizdate and serverid=@serverid and custid=@custid
    
   return -1
end catch
go
